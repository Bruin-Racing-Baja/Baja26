/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_CONTROL_FUNCTION_STATE_PB_H_INCLUDED
#define PB_CONTROL_FUNCTION_STATE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ControlFunctionState {
    uint32_t cycle_count;
    uint32_t cycle_start_us;
    uint32_t engine_count;
    uint32_t gear_count;
    float engine_rpm;
    float secondary_rpm;
    float filtered_engine_rpm;
    float filtered_secondary_rpm;
    float target_rpm;
    float engine_rpm_error;
    float velocity_command;
    float velocity_estimate;
    float position_estimate;
    uint32_t last_heartbeat_ms;
    uint32_t active_errors;
    uint32_t disarm_reason;
    uint32_t procedure_result;
    float bus_voltage;
    float bus_current;
    float iq_measured;
    float iq_setpoint;
    bool inbound_limit_switch;
    bool outbound_limit_switch;
    bool engage_limit_switch;
    bool velocity_mode;
    float position_command;
    float engine_rpm_derror;
    float throttle;
    float throttle_filtered;
    float brake;
    float brake_filtered;
    float p_term;
    float d_term;
    float wheel_ref_low_rpm;
    float wheel_ref_high_rpm;
    float wheel_ref_breakpoint_low_mph;
    float wheel_ref_breakpoint_high_mph;
    float d_throttle;
    uint32_t raw_throttle;
    uint32_t raw_brake;
} ControlFunctionState;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ControlFunctionState_init_default        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define ControlFunctionState_init_zero           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ControlFunctionState_cycle_count_tag     1
#define ControlFunctionState_cycle_start_us_tag  2
#define ControlFunctionState_engine_count_tag    3
#define ControlFunctionState_gear_count_tag      4
#define ControlFunctionState_engine_rpm_tag      5
#define ControlFunctionState_secondary_rpm_tag   6
#define ControlFunctionState_filtered_engine_rpm_tag 7
#define ControlFunctionState_filtered_secondary_rpm_tag 8
#define ControlFunctionState_target_rpm_tag      9
#define ControlFunctionState_engine_rpm_error_tag 10
#define ControlFunctionState_velocity_command_tag 11
#define ControlFunctionState_velocity_estimate_tag 12
#define ControlFunctionState_position_estimate_tag 13
#define ControlFunctionState_last_heartbeat_ms_tag 14
#define ControlFunctionState_active_errors_tag   15
#define ControlFunctionState_disarm_reason_tag   16
#define ControlFunctionState_procedure_result_tag 17
#define ControlFunctionState_bus_voltage_tag     18
#define ControlFunctionState_bus_current_tag     19
#define ControlFunctionState_iq_measured_tag     20
#define ControlFunctionState_iq_setpoint_tag     21
#define ControlFunctionState_inbound_limit_switch_tag 22
#define ControlFunctionState_outbound_limit_switch_tag 23
#define ControlFunctionState_engage_limit_switch_tag 24
#define ControlFunctionState_velocity_mode_tag   25
#define ControlFunctionState_position_command_tag 26
#define ControlFunctionState_engine_rpm_derror_tag 27
#define ControlFunctionState_throttle_tag        28
#define ControlFunctionState_throttle_filtered_tag 29
#define ControlFunctionState_brake_tag           30
#define ControlFunctionState_brake_filtered_tag  31
#define ControlFunctionState_p_term_tag          32
#define ControlFunctionState_d_term_tag          33
#define ControlFunctionState_wheel_ref_low_rpm_tag 34
#define ControlFunctionState_wheel_ref_high_rpm_tag 35
#define ControlFunctionState_wheel_ref_breakpoint_low_mph_tag 36
#define ControlFunctionState_wheel_ref_breakpoint_high_mph_tag 37
#define ControlFunctionState_d_throttle_tag      38
#define ControlFunctionState_raw_throttle_tag    39
#define ControlFunctionState_raw_brake_tag       40

/* Struct field encoding specification for nanopb */
#define ControlFunctionState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   cycle_count,       1) \
X(a, STATIC,   SINGULAR, UINT32,   cycle_start_us,    2) \
X(a, STATIC,   SINGULAR, UINT32,   engine_count,      3) \
X(a, STATIC,   SINGULAR, UINT32,   gear_count,        4) \
X(a, STATIC,   SINGULAR, FLOAT,    engine_rpm,        5) \
X(a, STATIC,   SINGULAR, FLOAT,    secondary_rpm,     6) \
X(a, STATIC,   SINGULAR, FLOAT,    filtered_engine_rpm,   7) \
X(a, STATIC,   SINGULAR, FLOAT,    filtered_secondary_rpm,   8) \
X(a, STATIC,   SINGULAR, FLOAT,    target_rpm,        9) \
X(a, STATIC,   SINGULAR, FLOAT,    engine_rpm_error,  10) \
X(a, STATIC,   SINGULAR, FLOAT,    velocity_command,  11) \
X(a, STATIC,   SINGULAR, FLOAT,    velocity_estimate,  12) \
X(a, STATIC,   SINGULAR, FLOAT,    position_estimate,  13) \
X(a, STATIC,   SINGULAR, UINT32,   last_heartbeat_ms,  14) \
X(a, STATIC,   SINGULAR, UINT32,   active_errors,    15) \
X(a, STATIC,   SINGULAR, UINT32,   disarm_reason,    16) \
X(a, STATIC,   SINGULAR, UINT32,   procedure_result,  17) \
X(a, STATIC,   SINGULAR, FLOAT,    bus_voltage,      18) \
X(a, STATIC,   SINGULAR, FLOAT,    bus_current,      19) \
X(a, STATIC,   SINGULAR, FLOAT,    iq_measured,      20) \
X(a, STATIC,   SINGULAR, FLOAT,    iq_setpoint,      21) \
X(a, STATIC,   SINGULAR, BOOL,     inbound_limit_switch,  22) \
X(a, STATIC,   SINGULAR, BOOL,     outbound_limit_switch,  23) \
X(a, STATIC,   SINGULAR, BOOL,     engage_limit_switch,  24) \
X(a, STATIC,   SINGULAR, BOOL,     velocity_mode,    25) \
X(a, STATIC,   SINGULAR, FLOAT,    position_command,  26) \
X(a, STATIC,   SINGULAR, FLOAT,    engine_rpm_derror,  27) \
X(a, STATIC,   SINGULAR, FLOAT,    throttle,         28) \
X(a, STATIC,   SINGULAR, FLOAT,    throttle_filtered,  29) \
X(a, STATIC,   SINGULAR, FLOAT,    brake,            30) \
X(a, STATIC,   SINGULAR, FLOAT,    brake_filtered,   31) \
X(a, STATIC,   SINGULAR, FLOAT,    p_term,           32) \
X(a, STATIC,   SINGULAR, FLOAT,    d_term,           33) \
X(a, STATIC,   SINGULAR, FLOAT,    wheel_ref_low_rpm,  34) \
X(a, STATIC,   SINGULAR, FLOAT,    wheel_ref_high_rpm,  35) \
X(a, STATIC,   SINGULAR, FLOAT,    wheel_ref_breakpoint_low_mph,  36) \
X(a, STATIC,   SINGULAR, FLOAT,    wheel_ref_breakpoint_high_mph,  37) \
X(a, STATIC,   SINGULAR, FLOAT,    d_throttle,       38) \
X(a, STATIC,   SINGULAR, UINT32,   raw_throttle,     39) \
X(a, STATIC,   SINGULAR, UINT32,   raw_brake,        40)
#define ControlFunctionState_CALLBACK NULL
#define ControlFunctionState_DEFAULT NULL

extern const pb_msgdesc_t ControlFunctionState_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ControlFunctionState_fields &ControlFunctionState_msg

/* Maximum encoded size of messages (where known) */
#define CONTROL_FUNCTION_STATE_PB_H_MAX_SIZE     ControlFunctionState_size
#define ControlFunctionState_size                223

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
